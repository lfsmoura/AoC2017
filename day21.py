example =  """../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#"""

inp = """../.. => .../.#./.#.
#./.. => .../#../#..
##/.. => #.#/.#./.#.
.#/#. => ##./##./...
##/#. => .##/###/#..
##/## => .##/#../##.
.../.../... => .#.#/###./##.#/###.
#../.../... => #.#./..#./..../#.#.
.#./.../... => #.##/..#./.#.#/####
##./.../... => ###./.#../####/##..
#.#/.../... => ...#/####/#.##/...#
###/.../... => .#../..#./#..#/..#.
.#./#../... => ###./.##./#.../..#.
##./#../... => #.#./...#/..../.###
..#/#../... => ..../..../##../#..#
#.#/#../... => ..#./#..#/.#../..##
.##/#../... => ##../.#.#/.##./...#
###/#../... => ..../#.../#..#/#..#
.../.#./... => ##.#/#.#./#.../#..#
#../.#./... => ..#./#.#./.##./....
.#./.#./... => ..##/#.../..../###.
##./.#./... => .#../...#/.##./.#.#
#.#/.#./... => ...#/#..#/.#../.###
###/.#./... => ###./.###/##.#/#.##
.#./##./... => ##.#/##../..##/..##
##./##./... => #.##/.###/.##./###.
..#/##./... => ##.#/.##./..##/####
#.#/##./... => ####/####/#.##/.#..
.##/##./... => ####/.#../####/#..#
###/##./... => #.#./..#./###./..#.
.../#.#/... => #.../..../.#../#.##
#../#.#/... => ..#./###./####/..#.
.#./#.#/... => #.##/.#../##.#/#.#.
##./#.#/... => ###./.###/###./##..
#.#/#.#/... => ...#/.##./.#.#/#.##
###/#.#/... => ####/#.../###./###.
.../###/... => ..##/#.##/.#../.#..
#../###/... => ..../.###/.#.#/...#
.#./###/... => #.##/.#.#/.#.#/.##.
##./###/... => #..#/.#.#/#.##/#.#.
#.#/###/... => #.../##../#.##/##.#
###/###/... => .#../.#../.###/..#.
..#/.../#.. => ...#/.##./.##./####
#.#/.../#.. => ##.#/##../#.#./.#..
.##/.../#.. => #..#/.##./####/.#..
###/.../#.. => ..../..../..##/..##
.##/#../#.. => ..##/.##./#..#/###.
###/#../#.. => ##.#/#..#/#.../#..#
..#/.#./#.. => #..#/##.#/.##./#..#
#.#/.#./#.. => .#../####/..##/#.##
.##/.#./#.. => ###./#..#/.##./###.
###/.#./#.. => ####/###./##../..##
.##/##./#.. => #.../####/...#/####
###/##./#.. => .#../#.##/.##./####
#../..#/#.. => .#../####/#.../....
.#./..#/#.. => .#.#/...#/.###/.#.#
##./..#/#.. => ..##/#..#/#..#/....
#.#/..#/#.. => .###/.#.#/.##./#.#.
.##/..#/#.. => ...#/#.##/#.../..##
###/..#/#.. => #.##/#.##/...#/#.##
#../#.#/#.. => #..#/..##/.#../.###
.#./#.#/#.. => #.##/..../.##./.#..
##./#.#/#.. => #.#./..#./.#.#/.#..
..#/#.#/#.. => ...#/#..#/###./##..
#.#/#.#/#.. => ##.#/##.#/.#.#/.#..
.##/#.#/#.. => #..#/#..#/##../.#..
###/#.#/#.. => #.##/..##/##.#/....
#../.##/#.. => ##.#/.##./...#/.#.#
.#./.##/#.. => .##./.###/###./.#.#
##./.##/#.. => #.#./#.##/..##/.#..
#.#/.##/#.. => ..#./.##./..##/.#..
.##/.##/#.. => ##../..##/#..#/#...
###/.##/#.. => ###./#..#/##.#/..#.
#../###/#.. => .###/#.../####/#.#.
.#./###/#.. => #.#./.###/#..#/....
##./###/#.. => ..#./.#.#/#.../#...
..#/###/#.. => ...#/..#./##../#..#
#.#/###/#.. => .#.#/###./.#../##..
.##/###/#.. => .#../###./..#./##..
###/###/#.. => .#../..##/#.../#...
.#./#.#/.#. => ##.#/..../##../.#..
##./#.#/.#. => #.../#.##/.###/#.##
#.#/#.#/.#. => ...#/..##/##.#/#.##
###/#.#/.#. => ...#/.#.#/###./#..#
.#./###/.#. => ...#/...#/##../#.##
##./###/.#. => ###./###./.#.#/..##
#.#/###/.#. => ..../#..#/..##/#..#
###/###/.#. => .#.#/.#.#/##../.###
#.#/..#/##. => .##./..#./##../....
###/..#/##. => ####/...#/.#.#/#...
.##/#.#/##. => ..#./...#/###./.#..
###/#.#/##. => ..../.#../.#../#.#.
#.#/.##/##. => .##./..../#.../.#.#
###/.##/##. => ..../#..#/...#/#...
.##/###/##. => #.##/##.#/#.../..#.
###/###/##. => .#../.###/###./##.#
#.#/.../#.# => .#.#/..../#..#/.#..
###/.../#.# => ##../#.##/##.#/..#.
###/#../#.# => .#.#/..../.#.#/.###
#.#/.#./#.# => ...#/..../##.#/#...
###/.#./#.# => ####/.###/#.#./#.##
###/##./#.# => #..#/.###/...#/###.
#.#/#.#/#.# => #.##/...#/.###/.##.
###/#.#/#.# => #.../.#.#/.#.#/.###
#.#/###/#.# => ##.#/##../###./#...
###/###/#.# => .##./.###/.#../..##
###/#.#/### => #.##/###./#..#/#..#
###/###/### => #.../..../#..#/#..."""

import re
import itertools

def parse(line):
    r = re.match(r'(.*) => (.*)', line)
    return r.group(1).split("/"), "".join(r.group(2).split("/"))

def rotate(m): return list(map(list, zip(*list(m)[::-1])))

assert rotate([[1,2],[3,4]]) == [[3,1],[4,2]]
def all_rules(r):
    key = r[0]
    rules = ["".join(key)]
    rules.append("".join(itertools.chain.from_iterable(map(list, map(reversed, key)))))
    
    for i in range(3):
        key = rotate(key)
        rules.append("".join(itertools.chain.from_iterable(key)))
        rules.append("".join(itertools.chain.from_iterable(map(list, map(reversed, key)))))
    
    #print(r, rules)
    return [(rule, r[1]) for rule in rules]

import math
# str => [grids cxc]
def spl(s, c):
    blocks = len(s) // (c*c)
    ret = []
    linesize = int(math.sqrt(len(s)))
    bpl = linesize // c
    for i in range(bpl):
        ret.append([])
        for j in range(bpl):
            init = i * linesize * c + j * c
            #print([(init + k * linesize,c) for k in range(c)])
            ret[i].append("".join(["".join(s[init + k * linesize:init + k * linesize+c]) for k in range(c)]))
    #print(ret)
    return ret

assert spl("abcd", 2) == [["abcd"]]
assert spl("abcdefghijklmnop", 2) == [["abef", "cdgh"], ["ijmn", "klop"]]

# [grids cxc] => str
def jn(grids, c):
    ret = []
    bpl = len(grids)
    for i in range(bpl):
        for j in range(c):
            ret.append("".join([grids[i][k][j*c:j*c+c] for k in range(len(grids[i])) ]))
    #print(ret)
    return "".join(ret)

assert "abcd" == jn(["abcd"],2)
assert "abcdefghijklmnop" == jn([["abef", "cdgh"], ["ijmn", "klop"]], 2)

# 5 iterations
# by 2 -> 2x2 => 3x3
# by 3 -> 3x3 => 4x4
# 3 => 4 => 6 => 9 => 12 => 18
def enhance(rls, it=5):
    rules = [parse(line) for line in rls.split('\n')]
    
    # create rules for all rotations
    # storing as dict str=>list
    rules = { rule[0]: rule[1] for rule in itertools.chain.from_iterable(all_rules(r) for r in rules) }
    
    #print(rules)
    pix = ".#...####"

    for i in range(it):
        print(i)
        c = 2 if len(pix) % 2 == 0 else 3
        pixels = spl(pix, c)
        print (pix,pixels)
        pixels = [[rules[r] for r in pixels[g]] for g in range(len(pixels))]
        pix = jn(pixels, c + 1)

    return pix.count("#")
    

assert enhance(example, 2) == 12

print("ans",enhance(inp, it=18))